# -*- mode: ruby -*-
# vi: set ft=ruby :

API_VERSION = "2"
IMAGE = "centos/8"
DOMAIN = "k8.io"
IP_PART = "192.160.0"
NODE_COUNT = 2
USER = "vagrant"

$msg = <<MSG
------------------------------------------------------
Kubernetes up and running ✌	☺ ✌ 

URLS:
 - Kubernetes control plane is running at https://192.160.0.10:6443
 - CoreDNS is running at https://192.160.0.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

------------------------------------------------------
MSG

ENV["LC_ALL"] = "en_US.UTF-8"

Vagrant.configure(API_VERSION) do |config|
  config.vm.define "master-node" do |subconfig|
    subconfig.vm.post_up_message = $msg
    subconfig.vm.box = IMAGE

    subconfig.vm.hostname = "master-node"

    subconfig.vm.network :private_network, ip: "#{IP_PART}.10"
    subconfig.vm.network :forwarded_port, guest: 80, host: 8080, auto_correct: true
    
    # Hostfile :: Master node
    subconfig.vm.provision "master-hostfile", type: "shell" do |mhf|
      mhf.inline = <<-SHELL
        echo -e "127.0.0.1\t$2" | tee -a /etc/hosts; echo -e "$1\t$2" | tee -a /etc/hosts
      SHELL
      mhf.args = ["#{IP_PART}.10", "master-node"]
    end
    # Hostfile :: Worker node
    subconfig.vm.provision "Update hostfile and authorized_keys", type: "shell" do |whu|
      whu.inline = <<-SHELL
        for i in $(eval echo {1..$2}); do 
          echo -e "${3}.$((10 + $i))\tworker-node-${i}" | tee -a /etc/hosts
        done
      SHELL
      whu.args   = ["#{USER}", "#{NODE_COUNT}", "#{IP_PART}"]
    end

    subconfig.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = 2
    end

    subconfig.vm.provision "Restart VM", type: "shell" do |reboot|
      reboot.privileged = true
      reboot.inline = <<-SHELL
        echo "----------------------------------|| Reboot to load all config"
      SHELL
      reboot.reboot = true
    end

    subconfig.vm.provision "master-node-setup", type: "shell" do |mns|
      mns.path = "script/bootstrap_master.sh"
      mns.args   = ["#{USER}", "#{IP_PART}", "10"]
    end

    subconfig.trigger.after :up do |trigger_local|
      trigger_local.run = {inline: "/bin/bash -c 'vagrant ssh --no-tty -c \"cat /etc/kubernetes/admin.conf\" master-node > admin.conf && rm -f \${HOME}/.kube/config 2>/dev/null; mkdir -p \${HOME}/.kube; cp -i admin.conf \${HOME}/.kube/config; rm -f admin.conf'"}
    end
  end
  
  (1..NODE_COUNT).each do |i|
    config.vm.define "worker-node-#{i}" do |subconfig|
      subconfig.vm.box = IMAGE

      subconfig.vm.hostname = "worker-node-#{i}"

      subconfig.vm.network :private_network, ip: "#{IP_PART}.#{i + 10}"

      # Hostfile :: Master node
      subconfig.vm.provision "master-hostfile", type: "shell" do |s|
        s.inline = <<-SHELL
          echo -e "$1\t$2" | tee -a /etc/hosts
          firewall-cmd --permanent --add-port=10250/tcp
          firewall-cmd --permanent --add-port=30000-32767/tcp
          firewall-cmd --reload
        SHELL
        s.args = ["#{IP_PART}.10", "master-node"]
      end
      # Hostfile :: Worker node
      (1..NODE_COUNT).each do |j|
        if i != j
          subconfig.vm.provision "other-worker-hostfile", type: "shell" do |supdate|
            supdate.inline = <<-SHELL
              echo -e "$1\t$2" | tee -a /etc/hosts
            SHELL
            supdate.args = ["#{IP_PART}.#{10 + j}", "worker-node-#{j}", "#{USER}", "#{i}"]
          end
        else
          subconfig.vm.provision "self-worker-hostfile", type: "shell" do |supdate|
            supdate.inline = <<-SHELL
              echo -e "127.0.0.1\t$2" | tee -a /etc/hosts; echo -e "$1\t$2" | tee -a /etc/hosts
            SHELL
            supdate.args = ["#{IP_PART}.#{10 + j}", "worker-node-#{j}", "#{USER}", "#{i}"]
          end
        end
      end

      subconfig.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
        vb.cpus = 2
      end

      subconfig.trigger.after :up do |trigger_local|
        trigger_local.run = {inline: "/bin/bash -c 'wpub_key=$(vagrant ssh --no-tty -c \"cat /home/#{USER}/.ssh/id_rsa.pub\" worker-node-#{i}) && vagrant ssh --no-tty -c \"echo \${wpub_key} >> /home/#{USER}/.ssh/authorized_keys\" master-node; mpub_key=$(vagrant ssh --no-tty -c \"cat /home/#{USER}/.ssh/id_rsa.pub\" master-node) && vagrant ssh --no-tty -c \"echo \${mpub_key} >> /home/#{USER}/.ssh/authorized_keys\" worker-node-#{i}'"}
      end

      subconfig.trigger.after :up do |trigger_remote|
        trigger_remote.run_remote = {inline: <<-SHELL
              kube_join=\$(echo "ssh #{USER}@master-node -o StrictHostKeyChecking=no '( cat /home/#{USER}/.bash_profile | grep KUBEADM_JOIN)'" | su - #{USER})
              kube_join=\$(echo ${kube_join} | awk -F'"' '{print \$2}')
              echo "sudo $kube_join" | su - #{USER}

              echo "scp -o StrictHostKeyChecking=no #{USER}@master-node:/etc/kubernetes/admin.conf /home/#{USER}/" | su - #{USER}
              echo "mkdir -p /home/#{USER}/.kube" | su - #{USER}
              echo "cp -i /home/#{USER}/admin.conf /home/#{USER}/.kube/config" | su - #{USER}
              echo "sudo chown #{USER}:#{USER} -R /home/#{USER}/.kube" | su - #{USER}
            SHELL
        }
      end

      subconfig.vm.provision "Restart VM", type: "shell" do |reboot|
        reboot.privileged = true
        reboot.inline = <<-SHELL
          echo "----------------------------------|| Reboot to load all config"
        SHELL
        reboot.reboot = true
      end
    end
  end

  config.vm.provision "vm-setup", type: "shell" do |vms|
    vms.path = "script/bootstrap.sh"
    vms.args   = ["#{USER}"]
  end
end
